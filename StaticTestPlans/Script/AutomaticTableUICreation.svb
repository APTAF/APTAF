'USEUNIT DatabaseFunctions
'USEUNIT Main

'USEUNIT FSO_Functions
'USEUNIT App_Common



Sub TestXMLDOM
  ' Create a COM object 
  ' If you have MSXML 4: 
  'Set Doc = Sys.OleObject("Msxml2.DOMDocument.4.0")
  ' If you have MSXML 6: 
  Set Doc = Sys.OleObject("Msxml2.DOMDocument.6.0")

  Doc.async = False
  
  ' Load data from a file
  ' We use the file created earlier
  Call Doc.load("C:\Delete\NameMapping.tcnm")
  
  ' Report an error, if, for instance, the markup or file structure is invalid 
  If Doc.parseError.errorCode <> 0 Then
    s = "Reason:" + Chr(9) + Doc.parseError.reason + Chr(13) + Chr(10) + _
        "Line:" + Chr(9) + CStr(Doc.parseError.line) + Chr(13) + Chr(10) + _
        "Pos:" + Chr(9) + CStr(Doc.parseError.linePos) + Chr(13) + Chr(10) + _
        "Source:" + Chr(9) + Doc.parseError.srcText
    ' Post an error to the log and exit
    Call Log.Error("Cannot parse the document.", s) 
    Exit Sub
  End If
  
  ' Obtain the node
  'Set Node = Doc.documentElement
  Set Node = Doc.selectSingleNode("//Root/Nodes/Children/Child/Children/Child/Children")
 Dim myArray(99,55)
  ' Process the node
  Call ParentNode(Node,myArray)
  PopLogFolder
  Call FilterArray(myArray)
End Sub


myI = 0
myJ=0
Sub ParentNode(ANode,myArray())

'Dim myArray(92,15)

  PopLogFolder
  ' If the node value is not null, output it 
  If aqObject.GetVarType(ANode.nodeValue) <> 1 Then
    Log.Message "Value: " + ANode.nodeValue
  End If
  
   ' Process the node's attributes
  If Left(ANode.nodeName, 1) <> "#" And ANode.nodeName = "Child" Then ' Exclude helper nodes from processing

    ' Obtain the attribute collection and 
    ' output the attributes to the log
    Set Attrs = ANode.attributes

    If (Attrs.length > 0) Then
        myJ=0
        strNodeValue = Attrs.item(0).nodeValue
        AppendLogFolder(strNodeValue)
        myI = myI +1
        myArray(myI,myJ)= strNodeValue
         
    End If

  End If
    
  ' Obtain the collection of child nodes
  Set ChildNodes = ANode.childNodes
  ' Processes each node of the collection
  For i = 0 to ChildNodes.length - 1
      If ChildNodes.item(i).nodename = "Child" Then
        
        Call ParentNode(ChildNodes.item(i),myArray)
      ElseIf  ChildNodes.item(i).nodename = "Children" Then
         Call ChildNode(ChildNodes.item(i),myArray)
      End If
'End If 
  Next
  
  ' Close the log folder
  'Log.PopLogFolder
End Sub

Sub ChildNode(ANode,myArray())


  If aqObject.GetVarType(ANode.nodeValue) <> 1 Then
    Log.Message "Value: " + ANode.nodeValue
  End If
  
   ' Process the node's attributes
  If Left(ANode.nodeName, 1) <> "#" And ANode.nodeName = "Child" Then ' Exclude helper nodes from processing

    ' Obtain the attribute collection and 
    ' output the attributes to the log
    Set Attrs = ANode.attributes
    If (Attrs.length > 0) Then
      myJ = myJ +1
      strNodeValue = Attrs.item(0).nodeValue
      Log.Message strNodeValue
       myArray(myI,myJ)= strNodeValue
        
    End If
  End If
    
  ' Obtain the collection of child nodes
  Set ChildNodes = ANode.childNodes
  ' Processes each node of the collection
  For i = 0 to ChildNodes.length - 1
      If(ChildNodes.item(i).nodeName = "Child") Then
        Call ChildNode(ChildNodes.item(i),myArray) 
      End If
  Next

End Sub

Sub FilterArray(myArray)
strDirection = "horizontal" 
'Call WriteToExcelReport(strTestPlanName,strSheetName,arrHeaderValues(),strDirection,intStartCol,intStartRow)
Call CreateTables("C:\delete\TestData.xlsx","MyTables",myArray,strDirection,2,2)
Call CreateScript(myArray)

End Sub

Sub CreateTables(strTestPlanName,strSheetName,arrHeaderValues(),strDirection,intStartCol,intStartRow)

  Dim Excelapp, objTestPlan, objSheet
  Dim intArrLength:intArrLength = UBound(arrHeaderValues)+1
   
  Set Excelapp = Sys.OleObject("Excel.Application")
  Set objTestPlan = Excelapp.Workbooks.Open(strTestPlanName)
  Set objSheet = objTestPlan.Sheets(strSheetName)
  Excelapp.DisplayAlerts = False
  

      For k=0 To  intArrLength-1
          strTableType = Left(arrHeaderValues(k,0),3)
          If strTableType = "dlg" Then
          objSheet.Cells(intStartRow, intStartCol) = arrHeaderValues(k,0)
          intStartRow = intStartRow + 1
          For j=1 To  UBound(arrHeaderValues,2)
              strColType = Left(arrHeaderValues(k,j),3)
              If strColType <> "btn" Then
              objSheet.Cells(intStartRow, intStartCol) = arrHeaderValues(k,j)
              intStartCol = intStartCol + 1
              End If
          Next
          intStartCol = 2
          intStartRow = intStartRow + 2
          End If
       Next
          'intStartRow = 2

  
  Call objTestPlan.Save
  Call objTestPlan.Close
  Call Excelapp.Quit

      set Excelapp = Nothing
      set objTestPlan = nothing
End Sub


'Sub CreateScript(myArray)
'
' For k=0 To  intArrLength-1
'          strTableType = Left(arrHeaderValues(k,0),3)
'          If strTableType = "dlg" Then
'          
'          sFilename = "C:\delete\UIScript"
'          If FSOFileExists(sFilename) Then
'             CreateTXTFile(sFilename)
'          End If
'          
'          sTest = "Sub "& arrHeaderValues(k,0)&"(objNameMapping, objRow, strOpenDialog, strHotKey)"
'          
'          Call WriteToTXTFile(sFilename,sText,bWrite)
'          For j=1 To  UBound(arrHeaderValues,2)
'              strColType = Left(arrHeaderValues(k,j),3)
'              If strColType <> "btn" Then
'              objSheet.Cells(intStartRow, intStartCol) = arrHeaderValues(k,j)
'              intStartCol = intStartCol + 1
'              End If
'          Next
'          intStartCol = 2
'          intStartRow = intStartRow + 2
'          End If
'       Next
'
'End Sub



Sub WriteScript

  sFilename = "C:\delete\UIScript.txt"
  If FSOFileExists(sFilename) Then
     CreateTXTFile(sFilename)
  End If

  dlgName = "dlgRun"
  'sText = "Sub "& dlgName&"(objNameMapping, objRow, strOpenDialog, strHotKey) " & newline & "Sub "& dlgName&"(objNameMapping, objRow, strOpenDialog, strHotKey) " &vbCrLf & "Sub "& dlgName&"(objNameMapping, objRow, strOpenDialog, strHotKey) " & content & "Sub "& dlgName&"(objNameMapping, objRow, strOpenDialog, strHotKey) "
strSubprocedure = "Sub "& dlgName&"(objNameMapping, objRow, strOpenDialog, strHotKey) " &vbCrLf& "Set dlgZZZ = objNameMapping." & dlgName 
Call WriteToTXTFile(sFilename,strSubprocedure,bWrite)

strOpenDialog = "Select Case strOpenDialog"& vbCrLf & "Case Shortcut"& vbCrLf & "objNameMapping.wndAutoPIPE.Keys(strHotKey)"& vbCrLf & "Case Ribbon" & vbCrLf & "' Ribbon is not accessable"& vbCrLf & "End Select"
Call WriteToTXTFile(sFilename,strOpenDialog,bWrite)
  
  

MyFields = "drp"

Select Case MyFields
Case "drp"

strExistErrorWarning = "If(objNameMapping.WaitAliasChild('dlgError', 60).WaitProperty('Exists', false, 10)) AND (objNameMapping.WaitAliasChild('dlgWarning', 60).WaitProperty('Exists', false, 10)) Then"
strNotNA = "If(drpZZZ  <> 'NA') Then"
strExistDialog = "If(objNameMapping.WaitAliasChild(" &dlgName&", 60000).WaitProperty('Exists', true, 10)) Then"
'strdlgZZZ.drpdwnZZZ.Keys(drpZZZ)


drpVariable = "Dim drpYYY : drpYYY = '"*"'&objRow.Item('drpZZZ') & '"*"' " & vbCrLf 
Call WriteToTXTFile(sFilename,drpVariable,bWrite)
'drpCode = "'Get value to enter in the 'ZZZ' field"&vbCrLf& strExistErrorWarning &vbCrLf&    &vbCrLf&    &vbCrLf&    &vbCrLf&




End Select

End Sub
